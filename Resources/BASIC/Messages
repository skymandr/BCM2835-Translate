#{DictTokens}
# The messages, note M24 is used from ERRHAN
M0:Warning: unmatched ()
M1:Warning: line number too big
M2:Warning: unmatched "
M3:Attempt to use badly nested error handler (or corrupt R13)
M4:Out of range value assigned to PAGE
M5:Out of range value assigned to LOMEM
M6:Out of range value assigned to HIMEM
M7:Program renumbered
M8:Bad program
M9:Not enough room to convert this program to text
M10:Static Integer variables:@% = "
M11:Dynamic variables:
M12:Procedures:
M13:Functions:
M14:Libraries:
M15:Installed libraries:
M16:Current Overlay (from "
M17:BASIC -help activated (use HELP at the > prompt for more help):
M18:BASIC64 -help activated (use HELP at the > prompt for more help):
M19:Unknown keyword.
M20:BASIC [-chain] <filename> to run a file (text/tokenised).BASIC -quit <filename> to run a file (text/tokenised) and quit when done.BASIC -load <filename> to start with a file (text/tokenised).BASIC @xxxxxxxx,xxxxxxxx to start with in-core text/tokenised program.BASIC -chain @xxxxxxxx,xxxxxxxx to run in-core text/tokenised program.
M21:BASIC64 [-chain] <filename> to run a file (text/tokenised).BASIC64 -quit <filename> to run a file (text/tokenised) and quit when done.BASIC64 -load <filename> to start with a file (text/tokenised).BASIC64 @xxxxxxxx,xxxxxxxx to start with in-core text/tokenised program.BASIC64 -chain @xxxxxxxx,xxxxxxxx to run in-core text/tokenised program.
M22:Starting with %0 bytes free
M23:Failed with %0 on line %1
M24:%1 at line %0
M25:The program size is %0 bytes, the variables use %1 bytes. There are %2 bytes of memory remaining.
M26:%0 assembled on %1.
M27:BASICVFP -help activated (use HELP at the > prompt for more help):
M28:BASICVFP [-chain] <filename> to run a file (text/tokenised).BASICVFP -quit <filename> to run a file (text/tokenised) and quit when done.BASICVFP -load <filename> to start with a file (text/tokenised).BASICVFP @xxxxxxxx,xxxxxxxx to start with in-core text/tokenised program.BASICVFP -chain @xxxxxxxx,xxxxxxxx to run in-core text/tokenised program.
# The errors
E0:Unknown setting of exception control.
E1:Silly!
E2:No room to do this renumber
E3:Line numbers larger than 65279 would be generated by this renumber
E4:No room
E5:Line too long
E6:Stopped
E7:Invalid LISTO option
E8:Invalid TWINO option
E9:Corruption of stack
E10:Error control status not found on stack for RESTORE ERROR
E11:Missing incore name
E12:LIST found line number reference
E13:Bad MODE
E14:Incorrect in-core file description
E15:INSTALL cannot be used in a program
E16:No such mnemonic
E17:No such suffix on EQU
E18:Bad immediate constant
E19:Bad address offset
E20:Assembler limit reached
E21:Bad shift
E22:Bad register
E23:Duplicate register in multiply
E24:Missing =
E25:Missing = in FOR statement
E26:Mistake
E27:Missing ,
E28:Type mismatch: number needed
E29:Type mismatch: numeric variable needed
E30:Type mismatch: numeric array needed
E31:Type mismatch: string needed
E32:Type mismatch: string variable needed
E33:Type mismatch: string array needed
E34:Type mismatch: array needed
E35:Type mismatch between arrays
E36:Can't assign to array of this size
E37:Array type mismatch as parameter
E38:Can't SWAP arrays of different types
E39:Not in a function
E40:Too low a value for $<number>
E41:Missing ""
E42:DIM() function needs an array
E43:No room to do matrix multiply with source(s) the same as destination
E44:Impossible dimension
E45:No end of dimension list )
E46:Bad DIM statement
E47:Can't DIM negative amount
E48:Arrays cannot be redimensioned
E49:No room for this DIM
E50:No room for this dimension
E51:Attempt to allocate insufficient memory
E52:Unreferenced local array in END=
E53:No room for program
E54:Items can only be made local in a function or procedure
E55:Not in a procedure
E56:Reference array incorrect
E57:Unknown array
E58:Unknown array in DIM() function
E59:Undimensioned array
E60:Subscript out of range
E61:Incorrect number of subscripts
E62:Syntax error
E63:Escape
E64:Division by zero
E65:String too long
E66:Number too big
E67:Number too big for arc Sine or arc Cosine
E68:Negative root
E69:Logarithm range
E70:Accuracy lost in Sine/Cosine/Tangent
E71:Exponent range
E72:Unknown or missing variable
E73:Can't use array reference here
E74:Missing )
E75:Missing (
E76:Missing ]
E77:Missing {
E78:Missing }
E79:Bad Hex
E80:Hex number too large
E81:Bad Binary
E82:No such function/procedure
E83:Bad call of function/procedure
E84:Arguments of function/procedure incorrect
E85:Invalid RETURN actual parameter
E86:Invalid array actual parameter
E87:Not in a FOR loop
E88:Can't match FOR
E89:Bad FOR control variable
E90:The step cannot be zero
E91:Missing TO
E92:No room for function/procedure call
E93:Not in a subroutine
E94:ON syntax
E95:ON range
E96:No such line
E97:Out of data
E98:DATA pointer not found on stack for RESTORE DATA
E99:Not in a REPEAT loop
E100:Too many nested structures
E101:Missing #
E102:Not in a WHILE loop
E103:Missing ENDCASE
E104:OF missing from CASE statement
E105:CASE..OF statement must be the last thing on a line
E106:Missing ENDIF
E107:Bad MOUSE variable
E108:Too many input expressions for SYS
E109:Too many output variables for SYS
E110:Can't install library
E111:Bad program used as function/procedure library
E112:No room for library
E113:Bad coprocessor opcode
E114:Missing [
E115:Bad FP precision
E116:Bad screen depth
E117:END= not allowed within DIM LOCAL
E118:%0 cannot be represented as a VFP/NEON floating point immediate constant, nearest value is %1
E119:VFP internal mismatch
E120:VFP scalar offset out of range
E121:VFP scalar must not change in register list
E122:Too many registers in list
E123:Label/offset must be word aligned
E124:Invalid arithmetic operation
#{DictTokens}
HAND:Bitwise logical AND between two integers. Priority 6.
HABS:This function gives the magnitude (absolute value) of a number (<factor>).
HACS:This function gives the arc cosine of a number (<factor>).
HADVAL:This function gives the value of the specified analogue port or buffer.
HASC:This function gives the ASCII code of the first character of a string.
HASN:This function gives the arc sine of a number (<factor>).
HATN:This function gives the arc tangent of a number (<factor>).
HAUTO:This command generates line numbers for typing in a program.AUTO [<base number>[,<step size>]]
HAPPEND:This command appends a file to the program and renumbers the new lines.
HBGET:This function gives the next byte from the specified file: BGET#<channel>.
HBPUT:BPUT#<channel>,<number>: put byte to open file.BPUT#<channel>,<string>[;]: put string to open file, with[out] newline.
HBEATS:BEATS <expression>: set the number of microbeats in a bar.As a function BEATS gives the current number of microbeats.
HBEAT:This function gives the current microbeat number.
HCOLOUR:COLOUR a [TINT t]: set text foreground colour [and tint] (background 128+a).COLOUR [OF f] [ON b]: set foreground to colour number f and/or background to b.COLOUR a,p: set palette entry for logical colour a to physical colour p.COLOUR [[OF] r,g,b] [ON r,g,b]: set foreground and/or background to r, g, b.COLOUR a,r,g,b[,s]: set palette entry for a to r, g, b physical colour.
HCONST:Introduces a line number reference in internal form.
HCALL:CALL<expression>[,<variable>]^: Call machine code.
HCASE:CASE <expression> OF: start of CASE..WHEN..OTHERWISE..ENDCASE structure.
HCHAIN:Load and run a new Basic program.
HCHR$:This function gives the one character string of the supplied ASCII code.
HCLEAR:Forget all variables.
HCLOSE:CLOSE#<channel>: close specified file.
HCLG:Clear graphics screen.
HCLS:Clear text screen.
HCOS:This function gives the cosine of a number (<factor>).
HCOUNT:This function gives the number of characters PRINTed since the last newline.
HCIRCLE:CIRCLE [FILL] x,y,r: draw circle outline [solid].
HCRUNCH:This command removes specified spaces from the current program.CRUNCH <expression>. The bits in the number mean:0: spaces before statements1: spaces in statements2: REM statements (except first)3: empty statements4: empty lines
HDATA:Introduces line of DATA to be READ. The list of items is separated by commas.LOCAL DATA, RESTORE DATA: save and restore current DATA pointer.
HDEG:This function gives the value in degrees of a number in radians.
HDEF:Define function or procedure: DEF FN|PROC<name>[(<parameter list>)].End function with =<expression>; end procedure with ENDPROC.
HDELETE:This command deletes all lines between the specified numbers.DELETE <start line number>,<end line number>
HDIV:Integer division, rounded towards zero, between two integers. Priority 3.
HDIM:DIM fred(100,100): create and initialise an array.DIM fred% [LOCAL] 100: allocate [temporary] space for a byte array etc.DIM(fred()): function gives the number of dimensions.DIM(fred(),n): function gives the size of the n'th dimension.
HDRAW:DRAW [BY] x,y: graphics draw to [relative by] x,y.
HENDPROC:End of procedure definition.
HEDIT:This command calls the ARM BASIC Editor.
HENDWHILE:End of WHILE structure. See WHILE.
HENDCASE:End of CASE structure at start of line. See CASE.
HENDIF:End of block IF structure at start of line. See IF.
HEND:END: statement marking end of program execution.END=<expression>: alter amount of memory allocated to BASIC.As a function END gives the end address of memory used.
HENVELOPE:ENVELOPE takes 14 numeric parameters separated by commas.
HELSE:Part of the IF..THEN..ELSE structure. If found at the start of line, it is part of the block IF..THEN..ELSE..ENDIF structure.ELSE can also appear in ON .. GOTO|GOSUB|PROC to set the default option.
HEVAL:This function evaluates a string: EVAL("2*X+1").
HERL:This function gives the line number of the last error.
HERROR:Part of ON ERROR; LOCAL ERROR and RESTORE ERROR statements.Cause an error: ERROR [EXT] <number>,<string>.
HEOF:This function gives TRUE if at end of open file; else FALSE: EOF#<channel>.
HEOR:Bitwise logical Exclusive-OR between two integers. Priority 7.
HERR:This function gives the error number of the last error.
HEXP:This function gives the exponential of a number (<factor>).
HEXT:This function gives the length (extent) of an open file: EXT#<channel>.EXT#<channel>=<expression> sets the length of an open file.
HELLIPSE:ELLIPSE [FILL] x,y,maj,min[,angle]: draw ellipse outline [solid].
HFOR:FOR <variable> = <start value> TO <limit value> [STEP <step size>].
HFALSE:This function gives the logical value 'false' i.e. 0.
HFILL:FILL [BY] x,y: flood fill from [relative to] point x,y.
HFN:Call a function with FNfred(x,y): define one with DEF FNfred(a,b).
HGOTO:GOTO <line number>: go to line number.
HGET$:This function gives the next input character as a one character string.GET$#<channel> gives next string from the file.
HGET:This function gives the ASCII value of the next character in the input stream.
HGOSUB:GOSUB <line number>: call subroutine at line number.
HGCOL:GCOL a [TINT t]: set graphics foreground colour [and tint] (background 128+a).GCOL <action>,a [TINT t]: set graphics fore|background colour and action.GCOL [OF [<action>],f] [ON [<action>],b]:Set graphics foreground and/or background colour number [and action].GCOL [[OF] [<action>,]r,g,b] [ON [<action>,]r,g,b]:Set graphics foreground and/or background colour to r, g, b [and action].
HHIMEM:This pseudo-variable reads or sets the address of the end of BASIC's memory.
HHELP:This command gives help on usage of the interpreter.
HHELPNO:HELP has no information on this keyword
HINPUT:INPUT [LINE]['|TAB|SPC]["display string"][,|;]<variable>: input from user.INPUT#<channel>,<list of variables>: input data from open file.
HIF:Single line if: IF <expression> [THEN] <statements> [ELSE <statements>].Block if: IF <expression> THEN<newline><lines>optional: ELSE <lines>must:ENDIF
HINKEY$:CHR$(INKEY...): see INKEY.
HINKEY:INKEY 0 to 32767: function waits <number> centiseconds to read character.INKEY -255 to -1: function checks specific key for TRUE|FALSE.INKEY -256: function gives operating system number.
HINT:This function gives the nearest integer less than or equal to the number.
HINSTR:INSTR(<string>,<sub string>[,<start position>]) find sub string position.
HINSTALL:This command permanently installs a library: see HELP LIBRARY.
HLIST:This command lists the program:LIST [<line number>][,[<line number>]][IF<pattern>]. list section [if pattern]LISTO <option number>. Bits mean:-0: space before line1: indent structure2: split lines at :3: don't list line number4: list tokens in lower case
HLINE:Draw a line: LINE x1,y1,x2,y2Part of INPUT LINE or LINE INPUT statement.
HLOAD:This command loads a new program.
HLOMEM:This pseudo-variable reads or sets the address of the start of the variables.
HLOCAL:LOCAL <list of variables>: make things private to function or procedure.LOCAL DATA: save DATA pointer on stack.LOCAL ERROR: save error control status on stack.
HLEFT$:LEFT$(<string>,<number>): gives leftmost number of characters from string.LEFT$(<string>): gives leftmost LEN-1 characters.LEFT$(<string variable>[,<count>])=<string>: overwrite characters from start.
HLEN:This function gives the length of a string.
HLET:Optional part of assignment.
HLOG:This function gives the common logarithm (base 10) of a number (<factor>).
HLN:This function gives the natural logarithm (base e) of a number (<factor>).
HLIBRARY:LIBRARY <string>: functions and procedures of the named program can be used.
HLVAR:This command lists all variables in use.
HMID$:MID$(<string>,<position>): gives all of string starting from position.MID$(<string>,<position>,<count>): gives some of string from position.MID$(<string variable>,<position>[,<count>])=<string>: overwrite characters.
HMODE:MODE <number>|<string>: set screen mode.MODE <width>,<height>,<bpp>[,<framerate>]: set screen mode.MODE <width>,<height>,<modeflags>,<ncolour>,<log2bpp>[,<framerate>]: set screen mode.As a function MODE gives the current screen mode.
HMOD:Remainder after integer division between two integers. Priority 3.The MOD function gives the square root of the sum of the squares of all the elements in a numeric array.
HMOVE:MOVE [BY] x,y: graphics move to [relative by] x,y.
HMOUSE:MOUSE x,y,z[,t]: sets x,y to mouse position; z to button state [t to time].MOUSE COLOUR a,r,g,b: set mouse palette entry for a to r, g, b physical colour.MOUSE OFF: turn mouse pointer off.MOUSE ON [a]: sets mouse pointer 1 [or a].MOUSE RECTANGLE x,y,width,height: constrain mouse movement to inside rectangle.MOUSE STEP a[,b]: sets mouse step multiplier to a,a [or a,b].MOUSE TO x,y: positions mouse and pointer at x,y.
HNEXT:NEXT [<variable>[,<variable>]^]: closes one or several FOR..NEXT structures.
HNEW:This command erases the current program.
HNOT:This function gives the number with all bits inverted (0 and 1 exchanged).
HOLD:This command recovers the program just after a NEW.
HON:ON: cursor on.ON ERROR [LOCAL|OFF]: define error handler.ON <expression> GOTO|GOSUB|PROC.... ELSE: call from specified list item.
HOFF:OFF: turn cursor off.Part of TRACE OFF, ON ERROR OFF statements.
HOF:Part of the CASE <expression> OF statement.
HORIGIN:ORIGIN x,y: sets x,y as the new graphics 0,0 point.
HOR:Bitwise logical OR between two integers. Priority 7.
HOPENIN:Open for Input: the function opens a file for input.
HOPENOUT:Open for Output: the function opens a file for output.
HOPENUP:Open for Update: the function opens a file for input and output.
HOSCLI:OSCLI <string>: give string to Operating System Command Line Interpreter.
HOTHERWISE:Identifies case exceptional section at start of line. See CASE.
HOVERLAY:OVERLAY <string array>: set an array of filenames for overlay libraries.
HPRINT:PRINT ['|TAB|SPC]["display string"][<expression>][;] print items in fields defined by @% - see HELP @%PRINT#<channel>,<list of expressions>: print data to open file.
HPAGE:This pseudo-variable reads or sets the address of the start of the program.
HPTR:This function gives the position in a file: PTR#<channel>.PTR#<channel>=<expression> sets the position in a file.
HPI:This function gives the value of 'pi' 3.1415926535.
HPLOT:PLOT n,x,y: graphics operation n.
HPOINT:POINT [BY] x,y: set pixel at [relative to] x,y.POINT TO x,y: position pointer at x,y if not linked to mouse.
HPOINTPAR:POINT(x,y) gives the logical colour of a graphics point.
HPROC:Call a procedure with PROCfred(x,y); define one with DEF PROCfred(a,b).
HPOS:This function gives the x-coordinate of the text cursor.
HQUIT:QUIT [<expression>]: leave the interpreter (passing optional return code <expression>).As a function QUIT gives TRUE if BASIC was entered with a -quit option.
HRETURN:End of subroutine.
HREPEAT:REPEAT: start of REPEAT..UNTIL structure; statement delimiter not required.
HREPORT:REPORT: print last error message.REPORT$ function gives string of last error string.
HREAD:READ <list of variables>: read the variables in turn from DATA statements.
HREM:Ignores rest of line.
HRUN:Clear variables and start execution at beginning of program.
HRAD:This function gives the value in radians of a number in degrees.
HRESTORE:RESTORE [+][<number>]: restore the data pointer to first or given line, or move forward <number> lines from the start of the next line.RESTORE DATA: restore DATA pointer from stack.RESTORE ERROR: restore error control status from stack.
HRIGHT$:RIGHT$(<string>,<number>): gives rightmost number of characters from string.RIGHT$(<string>): gives rightmost character.RIGHT$(<string variable>[,<count>])=<string>: overwrite characters at end.
HRND:RND: function gives a random integer.RND(n) where n<0: initialise random number generator based on n.RND(0): last RND(1) value.RND(1): random real 0..1.RND(n) where n>1: random value between 1 and INT(n).
HRECTANGLE:RECTANGLE [FILL] xlo,ylo,width[,height] [TO xlo,ylo]:Draw a rectangle outline [solid] or copy [move] the rectangle.
HRENUMBER:This command renumbers the lines in the program:RENUMBER [<base number>[,<step size>]]
HSTEP:Part of the FOR..TO..STEP structure.
HSAVE:This command saves the current program.
HSGN:This function gives the values -1, 0, 1 for negative, zero, positive numbers.
HSIN:This function gives the sine of a number (<factor>).
HSQR:This function gives the square root of a number (<factor>).
HSOUND:SOUND <channel>,<amplitude>,<pitch>,<duration>[,<start beat>]: make a sound.SOUND ON|OFF: enable|disable sounds.
HSPC:In PRINT or INPUT statements, prints out n spaces: PRINT SPC(10).
HSTR$:STR$[~]<number>: gives string representation [in hex] of a number (<factor>).
HSTRING$:STRING$(<number>,<string>): gives string replicated the number of times.
HSTOP:Stop program.
HSTEREO:STEREO <channel>,<position>: set the stereo position for a channel.
HSUM:This function gives the sum of all elements in an array.SUMLEN gives the total length of all elements of a string array.
HSWAP:SWAP <variable>,<variable>: exchange the contents.
HSYS:The SYS statement calls the operating system:SYS <expression> [,<expression>]^ [TO <variable>[,<variable>]^[;<variable>]]
HTAN:This function gives the tangent of a number (<factor>).
HTAB:In PRINT or INPUT statements:TAB to column n: PRINT TAB(10)s$.TAB to screen position x,y: PRINT TAB(10,20)s$.
HTEMPO:TEMPO <expression>: set the sound microbeat tempo.As a function TEMPO gives the current microbeat tempo.
HTEXTLOAD:This command loads a new program, converting from text form if required.
HTEXTSAVE:This command saves the current program as text [with a LISTO option].TEXTSAVE[O <expression>,] <string>
HTHEN:Part of the IF..THEN structure. If THEN is followed by a newline it introduces a block structured IF..THEN..ELSE..ENDIF.
HTIME:This pseudo-variable reads or sets the computational real time clock. TIME$ reads or sets the display version of the clock.
HTINT:TINT a,t: set the tint for COLOUR|GCOL|fore|back a to t in 256 colour modes.Also available as a suffix to GCOL and COLOUR.As a function TINT(x,y) gives the tint of a point in 256 colour modes.
HTO:TO: part of FOR..TO..TOP: gives the address of the end of the program.
HTRACE:TRACE [STEP] ON|OFF|PROC|FN|ENDPROC|<number>: trace [in single step mode] on or off, or procedure and function calls, or procedure/function exit points, or lines below <number>.TRACE TO <string>: send all output to stream <string>TRACE CLOSE: close stream output. Expression: TRACE gives handle of the stream.
HTRUE:This function gives the logical value 'true' i.e. -1.
HUNTIL:UNTIL <expression>: end of REPEAT..UNTIL structure.
HUSR:This function gives the value returned by a machine code routine.
HVDU:VDU <number>[;|][,<number>[;|]]: list of values to be sent to vdu., only - 8 bits.; 16 bits.| 8 bytes of zeroes.As a function VDU x gives the value of the specified vdu variable.
HVAL:This function gives the numeric value of a textual string e.g. VAL"23".
HVPOS:This function gives the y-coordinate of the text cursor.
HVOICES:VOICES <expression>: set the number of sound voice channels.
HVOICE:VOICE <channel>,<string>: assign a named sound algorithm to the voice channel.
HWHILE:WHILE <expression>: start of WHILE..ENDWHILE structure.
HWHEN:WHEN <expression>[,<expression>]^: identifies case section at start of line.See CASE.
HWAIT:Wait for vertical sync.
HWIDTH:WIDTH <expression>: set width of output.
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC|DBG|HVC|SMC|SMI[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI|SBFX|UBFX[<cond>] <reg>,<reg>,#<expr>,#<expr>USAT|SSAT[<cond>] <reg>,#<expr>,<shift>USAT16|SSAT16[<cond>] <reg>,#<expr>,<reg>UXTB|UXTB16|UXTH|UXTAB|UXTAB16|UXTAH|SXTB|SXTB16|SXTH[<cond>] <reg>,<shift>BKPT|HLT|UDF <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>MOV[T|W][<cond> <reg>,#<expr>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ|RBIT|REV|REVSH|REV16[<cond>] <reg>,<reg>CRC32[C]<B|H|W> <reg>,<reg>,<reg>QADD[8|16]|QSUB[8|16]|USAD8|USADA8|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>UADD|UHADD|UQADD|UQSUB|USUB|SADD|SHADD|SSUB|SHSUB<8|16>[<cond>] <reg>,<reg>,<reg>QASX|QSAX|UQASX|UQSAX|SHASX|SHSAX|SSAX|SASX|USAX|UASX|SEL[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|MLS|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>UMAAL[<cond>] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>SM<LA[L]|LS[L]|UA|US>D[X][<cond>] <reg>,<reg>,<reg>,<reg>SMM<LA|LS|UL>[R][<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDA|STL[<cond>][B|H] <reg>, '[ <reg> ']LDREX|LDAEX|STREX|STLEX[B|H|D][<cond>] <reg>, '[ <reg> ']LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]RFE<DA|DB|EA|ED|FA|FD|IA|IB> <reg>[!]SRS<DA|DB|EA|ED|FA|FD|IA|IB> SP[!],#<expr>SWP[<cond>][B] <reg>,<reg>, '[ <reg> ']PLD[W]|PLI '[ <reg>[,<shift>] ']PKH<BT|TB>[<cond>] <reg>,<reg>,<shift>PUSH|POP[<cond>] <reg list>B[L][<cond>] <label>BLX <label>BX|BLX|BXJ[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>WFE|WFI|SEV[L]|YIELD|ESB|CSDB[<cond>]DMB|DSB|ISB [SY|SYST|ST|LD|<ISH|NSH|OSH>[ST|LD]]TSB[<cond>] CSYNCSETEND <BE|LE>SETPAN #<expr>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>,<cpreg>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]CPS<ID|IE> <iflags[,#<expr>]>CPS #<expr>CLREX|ERET|SSBB|PSSBBMRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>
HASFP:ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]DCF|EQUF<prec> <expr>
HASFN:OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSRand <iflags>=A|I|F
H0:Help can do: 'HELP .' or 'HELP A' to print the names of keywords;'HELP PRINT' for help on any particular keyword and 'HELP [' for assembler.
H1:Possible keywords:
H@:This pseudo-variable reads or sets the number print format:PRINT @% gives a number, but LVAR and @%= use strings"G<number>.<number>" general format field and number of digits"E<number>.<number>" exponent format field and number of digits"F<number>.<number>" fixed format field and number of digits after '.'All parts optional. , or . in the above prints , or . as the decimal point.Leading + means @% applies to STR$ also.

#{Token0=BASIC}
HBASBAS:BASIC is the ARM BBC BASIC interpreter. 
SBASBAS:Syntax: *BASIC [-help|-chain|-load|-quit] <filename> 
#{Token0=BASIC64}
HBASB64:BASIC64 starts the double precision BASIC interpreter. 
SBASB64:Syntax: *BASIC64 [-help|-chain|-load|-quit] <filename> 
